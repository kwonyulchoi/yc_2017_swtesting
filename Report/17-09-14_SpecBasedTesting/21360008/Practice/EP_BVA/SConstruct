# -*- coding: utf-8 -*- 
import os
import sys
import glob
import atexit
import multiprocessing

# importing bd_common.py file =============
def Find_bd_ctx_path(ctx_file_path_input, bd_ctx_path_name, ctx_file_name, \
    depth_to_find = 3):
  for depth in range(depth_to_find):
    ctx_file_path = ctx_file_path_input+str('../'*depth)+bd_ctx_path_name
    if (os.path.isfile(ctx_file_path+'/'+ctx_file_name)):
      return ctx_file_path
  print("\033[1;31mErr,Can not find any build ctx file ["\
      +ctx_file_path_input+"]["+ctx_file_name+"]\033[m");
  exit(1)

bd_common_path = Find_bd_ctx_path('./','./build_context', 'bd_common.py')
sys.path.append(bd_common_path)
from bd_common import *
# =========================================


# make builder ==============================
common_env = Environment()

# make build context instance

bd_ctx = Create_Bd_Ctx()
if (bd_ctx == None) :
  print("\033[1;31mErr on build context instance \033[m")
  exit(1)
else :
  print("\033[1;33mModule ["+str(bd_ctx.m_ModuleID.m_ModuleID)+"] build start\033[m")


# get Target config  ========================
ret= bd_ctx.Get_target_config(ARGLIST)
if (ret[0] == False):
  print("\033[1;31mError on setting Target config\033[m")
  exit(1)
else:
  bd_ctx.m_Target_Config = ret[1]
if (bd_ctx.m_Target_Config == ''):
  print('Error on setting Target config')
  exit(1)
# ===========================================

# Purge All ; purge all including its sub modules
if (bd_ctx.Do_PurgeAll(ARGLIST,bd_ctx) == True):
  exit(0)

# Chk Collect Dependency Module bin files
bd_ctx.Do_Chk_collect_flag(ARGLIST,bd_ctx)

# dependent module builds ===================
if (GetOption('clean') != True) :
    if (bd_ctx.Do_dependent_module_build(bd_ctx.m_Target_Config
      , bd_ctx) != True ):
        exit(1)
## ===========================================

# remove dependency libraries
if (GetOption('clean') == True) :
    for item in glob.glob('out/'+bd_ctx.m_Target_Config+'/lib/*'):
        os.remove(item)

# default build execution option
# Set Number of CPU ===============================
num_cpu = int(os.environ.get('NUM_CPU',multiprocessing.cpu_count()))
SetOption('num_jobs', num_cpu)
print("\033[1;32mNumber of CPU in the system : "+str(num_cpu)+"\033[m")
# =================================================

# Post Build procedure ============================
if (GetOption('clean') != True) :
  atexit.register(display_build_status,bd_ctx,bd_ctx.m_Target_Config)
# =================================================

# Pre Build procedure ============================
bd_ctx.m_PreBuildJob(bd_ctx.m_Target_Config)
# =================================================

Target_env = common_env.Clone()
bd_ctx.Set_scons_builder(bd_ctx,bd_ctx.m_Target_Config,Target_env)
Test_env = Target_env.Clone()
bd_ctx.Set_scons_test_builder(bd_ctx,bd_ctx.m_Target_Config,Test_env)

Export('Target_env')
Export('Test_env')
Export('bd_ctx')


# generate output directories 
bd_ctx.Make_dirs(bd_ctx.m_Target_Config,bd_ctx.m_Output_Dir)
SConscript('./SConscript',variant_dir='out/'+bd_ctx.m_Target_Config,duplicate=0)
